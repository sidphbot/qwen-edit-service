name: Build & Push Fat Image (GHCR)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 600  # fat image => long build/push possible
    permissions:
      contents: read
      packages: write   # required to push to GHCR
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository_owner }}/qwen-edit

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Reclaim space on hosted runner (helps with 10–20GB images)
      - name: Free disk space
        run: |
          sudo rm -rf /usr/local/lib/android \
                      /opt/ghc \
                      /usr/share/dotnet \
                      "$AGENT_TOOLSDIRECTORY" || true
          docker system prune -af || true
          df -h

      # (Optional) QEMU — we still build only amd64, but this primes buildx nicely
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64

      # IMPORTANT: use buildx with the docker-container driver (enables GHA cache)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      # Login to GHCR using the repo’s GITHUB_TOKEN
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build & push your fat image
      - name: Build and push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:fat
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:fat-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Show image digest
        run: echo "Pushed digest: ${{ steps.build.outputs.digest }}"

      - name: Disk usage after build
        run: df -h
